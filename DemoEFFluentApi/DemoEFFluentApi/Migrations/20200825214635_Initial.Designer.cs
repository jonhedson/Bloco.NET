// <auto-generated />
using System;
using DemoEFFluentApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DemoEFFluentApi.Migrations
{
    [DbContext(typeof(EFFluentContext))]
    [Migration("20200825214635_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DemoEFFluentApi.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityInformationId")
                        .HasColumnType("int");

                    b.Property<int>("FKCountry")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.HasIndex("CityInformationId")
                        .IsUnique();

                    b.HasIndex("FKCountry");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DemoEFFluentApi.Models.CityInformation", b =>
                {
                    b.Property<int>("CityInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MayorName")
                        .HasColumnType("int");

                    b.Property<int>("OtherName")
                        .HasColumnType("int");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("CityInformationId");

                    b.ToTable("CityInformation");
                });

            modelBuilder.Entity("DemoEFFluentApi.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedOne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CountryName")
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("USA");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DemoEFFluentApi.Models.City", b =>
                {
                    b.HasOne("DemoEFFluentApi.Models.CityInformation", "CityInformation")
                        .WithOne("City")
                        .HasForeignKey("DemoEFFluentApi.Models.City", "CityInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoEFFluentApi.Models.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("FKCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
